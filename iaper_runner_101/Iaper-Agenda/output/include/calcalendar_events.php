<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_calcalendar  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeProcessList"]=true;

		$this->events["BeforeQueryList"]=true;

		$this->events["BeforeShowList"]=true;



		$this->events["BeforeProcessAdd"]=true;

		$this->events["BeforeAdd"]=true;

		$this->events["ProcessValuesAdd"]=true;

		$this->events["CustomAdd"]=true;

		$this->events["BeforeProcessEdit"]=true;

		$this->events["BeforeEdit"]=true;

		$this->events["CustomEdit"]=true;

		$this->events["BeforeQueryEdit"]=true;

		$this->events["ProcessValuesEdit"]=true;



		$this->events["BeforeProcessView"]=true;

		$this->events["ProcessValuesView"]=true;

		$this->events["BeforeQueryView"]=true;


	}

//	handlers

				// List page: Before process
function BeforeProcessList(&$pageObject)
{

		calendar_initSessionVariable();
global $calendarSettings;
if(postvalue("a")=="drop"){
	$conn = $pageObject->connection;
	$arr = explode("T",postvalue("start"));
	$arr2 = explode("T",postvalue("end"));
	$dat = postvalue("currDate");
	if($dat && postvalue("id")){
		$rs = DB::Query("select * from ".$calendarSettings["calendarTable"]." where ".$calendarSettings["calendarKeys"]["calendarid"]."=".postvalue("id"));
		if($record = $rs->fetchAssoc()){
			$editable = true;
			$diff = strtotime($dat)-strtotime($arr[0]);
			if(!$_SESSION["calendar_EditInPast"]){
				if(strtotime(date("Y-m-d")) - strtotime(date("Y-m-d",strtotime($record[$calendarSettings["calendarFields"]["calendarEndDate"]])-$diff)) > 0)
					$editable = false;
					echo "reload";
			}
			if($editable){
					$calendarEndDate = "";
					$calendarTimeField = "";
					$calendarEndTime = "";
					$calendarDayEvent = "";
					$strTime = "";
					if(calendarGetDateOrTimeKey("date")=="calendarDateTime")
						$strTime = " ".$arr[1];
					if(postvalue("mode")=="resize"){
						if(!$record["Recurrence"]){
							if($calendarSettings["calendarFields"]["calendarEndDate"])
								$calendarEndDate = ", ".$calendarSettings["calendarFields"]["calendarEndDate"]."='".date("Y-m-d",strtotime($arr2[0]))."'";
						}	
						if($calendarSettings["calendarFields"]["calendarTimeField"])
							$calendarTimeField = ",".$calendarSettings["calendarFields"]["calendarTimeField"]."='".$arr[1]."'";
						if($calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndTime = ", ".$calendarSettings["calendarFields"]["calendarEndTime"]."='".$arr2[1]."'";
						DB::Exec("update ".$calendarSettings["calendarTable"]." set ".calendarGetSetting(calendarGetDateOrTimeKey("date"))."='".date("Y-m-d",strtotime($arr[0])).$strTime." '".$calendarEndDate.$calendarTimeField.$calendarEndTime." where ".$calendarSettings["calendarKeys"]["calendarid"]."=".postvalue("id"));
					}
					else if(postvalue("allDay")=="true"){
						if($calendarSettings["calendarFields"]["calendarDayEvent"])
							$calendarDayEvent = $calendarSettings["calendarFields"]["calendarDayEvent"]."=1,";
						if($calendarSettings["calendarFields"]["calendarEndDate"] && $calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndDate = ", ".$calendarSettings["calendarFields"]["calendarEndDate"]."='".date("Y-m-d",strtotime($record[$calendarSettings["calendarFields"]["calendarEndDate"]])-$diff)."'";
						if($calendarSettings["calendarFields"]["calendarTimeField"])
							$calendarTimeField = ",".$calendarSettings["calendarFields"]["calendarTimeField"]."=''";
						if($calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndTime = ",".$calendarSettings["calendarFields"]["calendarEndTime"]."=''";
						DB::Exec("update ".$calendarSettings["calendarTable"]." set ".$calendarDayEvent.calendarGetSetting(calendarGetDateOrTimeKey("date"))."='".date("Y-m-d",strtotime($arr[0]))."'".$calendarEndDate.$calendarTimeField.$calendarEndTime." where ".$calendarSettings["calendarKeys"]["calendarid"]."=".postvalue("id"));	
					}
					else if($record["Recurrence"]){
						if($calendarSettings["calendarFields"]["calendarTimeField"])
							$calendarTimeField = ",".$calendarSettings["calendarFields"]["calendarTimeField"]."='".$arr[1]."'";
						if($calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndTime = ",".$calendarSettings["calendarFields"]["calendarEndTime"]."='".$arr2[1]."'";
						if($calendarSettings["calendarFields"]["calendarEndDate"] && $calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndDate = ", ".$calendarSettings["calendarFields"]["calendarEndDate"]."='".date("Y-m-d",strtotime($record[$calendarSettings["calendarFields"]["calendarEndDate"]])-$diff)."'";
						DB::Exec("update ".$calendarSettings["calendarTable"]." set ".$calendarDayEvent.calendarGetSetting(calendarGetDateOrTimeKey("date"))."='".date("Y-m-d",strtotime($record[calendarGetSetting(calendarGetDateOrTimeKey("date"))])-$diff)."'".$calendarEndDate.$calendarTimeField.$calendarEndTime." where ".$calendarSettings["calendarKeys"]["calendarid"]."=".postvalue("id"));
					}
					else{
						if($calendarSettings["calendarFields"]["calendarDayEvent"])
						if($calendarSettings["calendarFields"]["calendarDayEvent"])
							$calendarDayEvent = $calendarSettings["calendarFields"]["calendarDayEvent"]."=0,";
						if($calendarSettings["calendarFields"]["calendarEndDate"])
							$calendarEndDate = ", ".$calendarSettings["calendarFields"]["calendarEndDate"]."='".date("Y-m-d",strtotime($arr2[0]))."'";
						if($calendarSettings["calendarFields"]["calendarTimeField"])
							$calendarTimeField = ",".$calendarSettings["calendarFields"]["calendarTimeField"]."='".$arr[1]."'";
						if($calendarSettings["calendarFields"]["calendarEndTime"])
							$calendarEndTime = ", ".$calendarSettings["calendarFields"]["calendarEndTime"]."='".$arr2[1]."'";
						DB::Exec("update ".$calendarSettings["calendarTable"]." set ".$calendarDayEvent.calendarGetSetting(calendarGetDateOrTimeKey("date"))."='".date("Y-m-d",strtotime($arr[0])).$strTime."'".$calendarEndDate.$calendarTimeField.$calendarEndTime." where ".$calendarSettings["calendarKeys"]["calendarid"]."=".postvalue("id"));	
						//if($arr[1] && $arr2[1])
						//	DB::Exec("update calcalendar set TimeField='".$arr[1]."', EndTime='".$arr2[1]."' where id=".postvalue("id"));
					}
					if($record["Recurrence"])
						echo "reload";
			}
		}
	}
	die();	
}
if(postvalue("a")=="monthly"){

	if(postvalue("defdate")){
		$arr = explode("T",postvalue("defdate"));
		$arr2 = explode("-",$arr[0]);
		$_SESSION["yr"] = (int)$arr2[0];
		$_SESSION["mon"] = (int)$arr2[1];
		$_SESSION["days"] = (int)$arr2[2];
	}

	$strWhereClause=$_SESSION["strWhereClause"];
	if ($_SESSION["calendar_FirstDayOfWeek"]) {
		$firstWeekDay = ( $_SESSION["calendar_FirstDayOfWeek"]  + 6 ) % 7; 
	}
	else 
		$firstWeekDay = 6; //	6 - sunday

	$currentDate = array( $_SESSION["yr"], $_SESSION["mon"], $_SESSION["days"], 0, 0, 0 );
	if(postvalue("view") != "year"){
		$monthStart = array( $_SESSION["yr"], $_SESSION["mon"], 1, 0, 0, 0 );
		$monthDays = calendar_getMonthDays($_SESSION["yr"], $_SESSION["mon"]);
		$monthEnd = calendar_adddays($monthStart, $monthDays+6);
		$monthFirstDay = getdayofweek($monthStart);
		if ($firstWeekDay == 6 && $monthFirstDay == 7){
			$monthFirstDay = 0;
		}
		$endTable = 42;
		if (($monthDays+$monthFirstDay)<=36){
			$endTable = 35;
		}
		$monthStartGrid = calendar_adddays($monthStart,-$monthFirstDay);
		$monthEndGrid = calendar_adddays($monthEnd,($endTable-($monthDays+$monthFirstDay)));
	}
	else{
		$monthStart = array( $_SESSION["yr"], 1, 1, 0, 0, 0 );
		$monthFirstDay = getdayofweek($monthStart);
		if ($firstWeekDay == 6 && $monthFirstDay == 7){
			$monthFirstDay = 0;
		}
		$endTable = 42;
		if (($monthDays+$monthFirstDay)<=36){
			$endTable = 35;
		}
		$monthStartGrid = calendar_adddays($monthStart,-$monthFirstDay);
		
		$monthStart = array( $_SESSION["yr"], 12, 31, 0, 0, 0 );
		$monthDays = calendar_getMonthDays($_SESSION["yr"], $_SESSION["mon"]);
		$monthEnd = calendar_adddays($monthStart, $monthDays);
		$monthFirstDay = getdayofweek($monthStart);
		if ($firstWeekDay == 6 && $monthFirstDay == 7){
			$monthFirstDay = 0;
		}
		$endTable = 42;
		if (($monthDays+$monthFirstDay)<=36){
			$endTable = 35;
		}
		$monthEndGrid = calendar_adddays($monthEnd,($endTable-($monthDays+$monthFirstDay)));
	}
	$rawevents = calendar_getListOfEventsInRange( $monthStartGrid, $monthEndGrid, $strWhereClause, $pageObject->connection );
	$events = calendar_sortEvents($monthStartGrid, $monthEndGrid, $rawevents );
	$count_res = 0;
	$startDate = $monthStartGrid[0]."-".$monthStartGrid[1]."-".$monthStartGrid[2];
	
	$rs = DB::Query("select * from calglobals order by id");
	$glob = $rs->fetchAssoc();
	$gStartTime = $glob["StartTime"];
	$gEndTime = $glob["EndTime"];

	$pSet = new ProjectSettings( "calcalendar", "list" );
	$strPerm = $pSet->getAdvancedSecurityType();
	foreach($events as $ekey=>$values){
		foreach($values as $k=>$val){
			$key = date("Y-m-d",strtotime($ekey));
			$EndDate = date("Y-m-d",strtotime($val[$calendarSettings["calendarFields"]["calendarEndDate"]]));
			$ddate = $val[calendarGetSetting(calendarGetDateOrTimeKey("date"))];
			if(!$val[$calendarSettings["calendarFields"]["calendarRecurrence"]] && strtotime(date("Y-m-d",strtotime($ddate)))!=strtotime($key) && strtotime($startDate) != strtotime($key))
				continue;
			if(!$val[$calendarSettings["calendarFields"]["calendarDayEvent"]] && $val[$calendarSettings["calendarFields"]["calendarTimeField"]] && $gStartTime && strtotime($val[$calendarSettings["calendarFields"]["calendarTimeField"]])<strtotime($gStartTime))
				continue;
			if(!$val[$calendarSettings["calendarFields"]["calendarDayEvent"]] && $val[$calendarSettings["calendarFields"]["calendarEndTime"]] && $gEndTime && strtotime($val[$calendarSettings["calendarFields"]["calendarEndTime"]])>strtotime($gEndTime) && $gEndTime!="00:00:00")
				continue;
			$elem["id"] = $val[$calendarSettings["calendarKeys"]["calendarid"]];
			$elem["currDate"] = $key;
			$t1="";
			$t2="";
			if(!$val[$calendarSettings["calendarFields"]["calendarDayEvent"]]){
				if($val[$calendarSettings["calendarFields"]["calendarTimeField"]])
					$t1 = "T".$val[$calendarSettings["calendarFields"]["calendarTimeField"]];
				if($val[$calendarSettings["calendarFields"]["calendarEndTime"]])
					$t2 = "T".$val[$calendarSettings["calendarFields"]["calendarEndTime"]];
				if(calendarGetDateOrTimeKey("date")=="calendarDateTime")
					$t1 = "T".date("h:i:s",strtotime($val[calendarGetSetting(calendarGetDateOrTimeKey("date"))]));
				$elem["EndDate"] = $EndDate;
			}
			else
				$EndDate = date("Y-m-d",strtotime($EndDate)+60*60*24);
			$elem["start"] = $key.$t1;
			$elem["EndDate"] = $EndDate;
						
			if(!$val[$calendarSettings["calendarFields"]["calendarRecurrence"]])
				$elem["end"] = $EndDate.$t2;
			else
				$elem["end"] = $key.$t2;
			
			if($val[$calendarSettings["calendarFields"]["calendarSubject"]])
				$elem["title"] = $val[$calendarSettings["calendarFields"]["calendarSubject"]];
			else
				$elem["title"] = "<Empty>";
			if($val["Color"])
				$elem["color"] = $val["Color"];
			else {
				if($val["DateField"]==$EndDate)
					$elem["color"] = "#3a87ad";
				else
					$elem["color"] = $_SESSION["calendar_RangedColor"];
			}
			
			$elem["ownerID"] = $val[$calendarSettings["calendarFields"]["calendarOwnerID"]];
			if($val["OwnerID"]!=$_SESSION["UserID"] && $_SESSION["AccessLevel"] != ACCESS_LEVEL_ADMINGROUP && $strPerm !=0 || isLoggedAsGuest())
				$elem["editable"] = false;
			else
				$elem["editable"] = true;
			
			if(!$_SESSION["calendar_EditInPast"]){
				if($val[$calendarSettings["calendarFields"]["calendarTimeField"]] && strtotime(date("Y-m-d h:i:s")) - strtotime($EndDate." ".$val[$calendarSettings["calendarFields"]["calendarTimeField"]]) >= 0)
					$elem["editable"] = false;
				if(!$val[$calendarSettings["calendarFields"]["calendarTimeField"]] && strtotime(date("Y-m-d")) - strtotime($EndDate) >= 0)
					$elem["editable"] = false;
			}

			$elem["className"] = "";
			$elem1 = $elem;
			$res[$count_res] = $elem1;
			$count_res++;
		}
	}
	$rs = DB::Query("select * from calholidays");
	while( $data = $rs->fetchAssoc() ){
		$elem["id"] = "0";
		$elem["title"] = $data["name"];
		$elem["start"] = str_replace(" 00:00:00","",$data["date"]);
		$elem["end"] = str_replace(" 00:00:00","",$data["date"]);
		$elem["editable"] = false;
		$elem["className"] = "holidays";
		$elem["color"] = $_SESSION["calendar_HolidayColor"];
		$elem["currDate"] = "";
		$elem["EndDate"] = "";
		$elem1 = $elem;
		$res[$count_res] = $elem1;
		$count_res++;
	}
	echo my_json_encode($res);
	die();
}

$pageObject->AddCSSFile("fullcalendar/fullcalendar.css");
$pageObject->AddJSFile("fullcalendar/moment.min.js");
$pageObject->AddJSFile("fullcalendar/fullcalendar.js","fullcalendar/moment.min.js");
$pageObject->AddJSFile("fullcalendar/lang-all.js","fullcalendar/fullcalendar.js");

$pageObject->AddJSFile("include/runnerJS/calendar_lib.js");
$pageObject->AddJSFile("include/runnerJS/calendar_buttons.js", "include/runnerJS/pages/AddPage.js");
$pageObject->AddJSFile("include/runnerJS/calendar_add_edit.js", "include/runnerJS/pages/AddPage.js");
;		
} // function BeforeProcessList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before SQL query
function BeforeQueryList(&$strSQL, &$strWhereClause, &$strOrderBy, &$pageObject)
{

		$_SESSION["strWhereClause"] = "";
if(postvalue("qs")){
	$conn = $pageObject->connection;
	$_SESSION["strWhereClause"]=$conn->addFieldWrappers("Subject")." like '%".postvalue("qs")."%' or ".$conn->addFieldWrappers("Description")." like '%".postvalue("qs")."%' or ".$conn->addFieldWrappers("OwnerID")." like '%".postvalue("qs")."%'";
}
if(postvalue("f")){
	$pageObject->searchClauseObj->processFiltersWhere( $pageObject->connection );
	$filters = $pageObject->searchClauseObj->filteredFields;
	$res = "";
	foreach($filters as $arrval){
		if($res)
			$res.=" and ";		
		$res.= $arrval["where"];
	}
	$_SESSION["strWhereClause"] = $res;
}
if(postvalue("q")){
	$nonaggregatedFields = $pageObject->pSet->getListOfFieldsByExprType(false);
	$res = $pageObject->searchClauseObj->buildItegratedWhere($nonaggregatedFields);
	$_SESSION["strWhereClause"] = $res;
}
if(postvalue("a") == "showall")
	$_SESSION["strWhereClause"] = "";

$strWhereClause = $_SESSION["strWhereClause"];
;		
} // function BeforeQueryList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, &$pageObject)
{

		

calendar_getGlobalSettings();
$pageObject->setProxyValue('userid', $_SESSION["UserID"]);  
$pageObject->setProxyValue('defaultColor', $_SESSION["calendar_DefaultColor"]);  
$pageObject->setProxyValue('WeekendColor', $_SESSION["calendar_WeekendColor"]);  
$pageObject->setProxyValue('FirstDayOfWeek', $_SESSION["calendar_FirstDayOfWeek"]);  
$pageObject->setProxyValue('inPast', $_SESSION["calendar_EditInPast"]);  
global $locale_info;

if(strtolower(substr($locale_info["LOCALE_SSHORTDATE"],0,1)) == "d")
	$pageObject->setProxyValue('formatdate', "d");  
else
	$pageObject->setProxyValue('formatdate', "m");  

if(strpos($locale_info["LOCALE_STIMEFORMAT"],"tt")>-1)
	$pageObject->setProxyValue('formattime', 12);  
else
	$pageObject->setProxyValue('formattime', 24);  

global $calendarSettings;
if( isClanedarTableUserDefined() ) 
{
	$userTablepSet = new ProjectSettings( $calendarSettings["calendarTable"] );
	$pageObject->settingsMap["globalSettings"]["shortTNames"][ $calendarSettings["calendarTable"] ] = $userTablepSet->getShortTableName();
	
	$pageObject->setProxyValue( "userDefined", true );
	$pageObject->setProxyValue( "calendarTName", $calendarSettings["calendarTable"] ); 
	$pageObject->setProxyValue( "calendarKey", $calendarSettings["calendarKeys"]["calendarid"] ); 
	$pageObject->setProxyValue( "calendarDateField",$calendarSettings["calendarFields"]["calendarDateField"] ); 
	$pageObject->setProxyValue( "calendarEndDate",$calendarSettings["calendarFields"]["calendarEndDate"] ); 
	$pageObject->setProxyValue( "calendarSubjField",$calendarSettings["calendarFields"]["calendarSubject"] ); 
}

$_SESSION["language"] = mlang_getcurrentlang();

$lang = "en";
if(@$_SESSION["language"]){
	$str = "select * from callocale where runnerlocale='".$_SESSION["language"]."'";
	$rs = DB::Query($str);
	$data = $rs->fetchAssoc();
	$lang = $data["fullcalendarlocale"];
}
$pageObject->setProxyValue("lang",$lang);

$rs = DB::Query("select * from calglobals order by id");
$glob = $rs->fetchAssoc();
$gStartTime = "00:00:00";
if($glob["StartTime"])
	$gStartTime = $glob["StartTime"];
$gEndTime = "24:00:00";
if($glob["EndTime"])
	$gEndTime = $glob["EndTime"];
$pageObject->setProxyValue("minTime",$gStartTime);
$pageObject->setProxyValue("maxTime",$gEndTime);

;		
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
				// Add page: Before process
function BeforeProcessAdd(&$pageObject)
{

		calendar_initSessionVariable();
;		
} // function BeforeProcessAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$message, $inline, &$pageObject)
{

		$ret = true;

calendar_tempValidateEvent($values, $ret, $message);
$values["OwnerID"]=$_SESSION["UserID"];
$values["RecurType"]="Never";
$arrEvStart = explode("-",$values["DateField"]);
$adays = calendar_getMonthDays($arrEvStart[0], $arrEvStart[1]);
$arrEvStart = calendar_adddays($arrEvStart,$adays);
$eventStart = $arrEvStart[0]."-".$arrEvStart[1]."-".$arrEvStart[2];
$values["RecurOnValue"]=$eventStart;
$values["RecurAfterValue"]=1;
return $ret;


;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesAdd(&$values, &$pageObject)
{

		calendar_hideFields($pageObject);

// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function ProcessValuesAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom add
function CustomAdd(&$values, &$keys, &$error, $inline, &$pageObject)
{

		calendar_AddRecord($values);

return false;
;		
} // function CustomAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
				// Edit page: Before process
function BeforeProcessEdit(&$pageObject)
{

		$pageObject->AddJSFile("include/runnerJS/calendar_add_edit.js", "include/runnerJS/pages/EditPage.js");
/*if($_REQUEST["delete1"])
{
	calendar_deleteOneEvent($_REQUEST["editid1"]);
	exit();
}*/
;		
} // function BeforeProcessEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, $where, &$oldvalues, &$keys, &$message, $inline, &$pageObject)
{

		$ret = true;
calendar_tempValidateEvent($values, $ret, $message);
$values["OwnerID"]=$_SESSION["UserID"];
$values["EndDate"] = setEndValue($values["EndDate"], $values);


return $ret;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom record update
function CustomEdit(&$values, $where, &$oldvalues, &$keys, &$error, $inline, &$pageObject)
{

		calendar_UpdateRecord($values, $oldvalues, $keys);

return false;
;		
} // function CustomEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Edit page: Before SQL query
function BeforeQueryEdit(&$strSQL, &$strWhereClause, &$pageObject)
{

		if( isClanedarTableUserDefined() ) 
	$strWhereClause = "1=1";
;		
} // function BeforeQueryEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesEdit(&$values, &$pageObject)
{

		calendar_initSessionVariable();
calendar_hideFields($pageObject);

if( isClanedarTableUserDefined() ) {
	$strSQL = calendar_getDbValuesById($_REQUEST["editid1"], $pageObject->connection);
	$rs = DB::Query($strSQL);
	$val = $rs->fetchAssoc();
	$val = calendar_convertValues($val);
}
else
	$val = calendar_convertValues($values);


if($val["Recurrence"]==0 && !($val["EndDate"]))
	$val["EndDate"] = ($_SESSION["yr"]+1)."-".$_SESSION["mon"]."-".$_SESSION["days"];
if($val["Recurrence"]==0 && !($val["Period"])) {
	$val["Period"]="d";
	$val["PeriodDays"] = calendar_setUpdatePeriodDay($pageObject->connection);
}

foreach($val as $k=>$v){
	if(array_key_exists($k,$values))
		$values[$k] = $val[$k];
}
;		
} // function ProcessValuesEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
				// View page: Before process
function BeforeProcessView(&$pageObject)
{

		$pageObject->AddJSFile("include/runnerJS/calendar_add_edit.js", "include/runnerJS/pages/ViewPage.js");

// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function BeforeProcessView

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesView(&$values, &$pageObject)
{

		if( isClanedarTableUserDefined() ) {
	global $calendarSettings;
	$strSQL = calendar_getDbValuesById($_REQUEST["editid1"], $pageObject->connection);
	$rs = DB::Query($strSQL);
	$val = $rs->fetchAssoc();
	if($calendarSettings["calendarFields"]["calendarDateTime"] && !$calendarSettings["calendarFields"]["calendarTimeField"]){
		$arr = explode(" ",$val[$calendarSettings["calendarFields"]["calendarDateTime"]]);
		$val["TimeField"] = $arr[1];
	}
}
$val = calendar_convertValues($val);
if($val["Category"]==0)
	$val["Category"]="none";

foreach($val as $k=>$v){
	if(array_key_exists($k,$values))
		$values[$k] = $val[$k];
}


;		
} // function ProcessValuesView

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// View page: Before SQL query
function BeforeQueryView(&$strSQL, &$strWhereClause, &$pageObject)
{

		if( isClanedarTableUserDefined() ) 
	$strWhereClause = "1=1";

;		
} // function BeforeQueryView

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
